[{"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/index.tsx":"1","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/pages/App.tsx":"2","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/index.ts":"3","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/Combine.tsx":"4","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/top/Header.tsx":"5","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Title.ts":"6","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Url.ts":"7","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Login.ts":"8","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/ModalState.ts":"9","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Discription.ts":"10","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/PrivateClip.ts":"11","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/PublicClip.tsx":"12","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/KanbanBoard.tsx":"13","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/Inbox.tsx":"14","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/CreateProject.tsx":"15","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/Setting.tsx":"16","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/LoginGoogle.tsx":"17","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/ToggleProject.tsx":"18","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/PrivateClip.tsx":"19","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/ClipAddButton.tsx":"20","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/usePrivateClip.tsx":"21","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/Clip.tsx":"22","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/useInput.tsx":"23","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/useModal.tsx":"24","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/style/GlobalStyle.ts":"25","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/style/StickyNote.ts":"26"},{"size":627,"mtime":1612830602802,"results":"27","hashOfConfig":"28"},{"size":535,"mtime":1612832898915,"results":"29","hashOfConfig":"28"},{"size":529,"mtime":1612421146603,"results":"30","hashOfConfig":"28"},{"size":647,"mtime":1612700008043,"results":"31","hashOfConfig":"28"},{"size":448,"mtime":1612830597018,"results":"32","hashOfConfig":"28"},{"size":476,"mtime":1612421146601,"results":"33","hashOfConfig":"28"},{"size":450,"mtime":1612421146602,"results":"34","hashOfConfig":"28"},{"size":624,"mtime":1611575582343,"results":"35","hashOfConfig":"28"},{"size":678,"mtime":1611586275104,"results":"36","hashOfConfig":"28"},{"size":554,"mtime":1612421146601,"results":"37","hashOfConfig":"28"},{"size":2330,"mtime":1612830602802,"results":"38","hashOfConfig":"28"},{"size":288,"mtime":1612600216956,"results":"39","hashOfConfig":"28"},{"size":377,"mtime":1612600216956,"results":"40","hashOfConfig":"28"},{"size":605,"mtime":1612834520276,"results":"41","hashOfConfig":"28"},{"size":3139,"mtime":1612421146598,"results":"42","hashOfConfig":"28"},{"size":1562,"mtime":1612830597017,"results":"43","hashOfConfig":"28"},{"size":920,"mtime":1612490530721,"results":"44","hashOfConfig":"28"},{"size":1561,"mtime":1612707513197,"results":"45","hashOfConfig":"28"},{"size":1685,"mtime":1612830602801,"results":"46","hashOfConfig":"28"},{"size":4003,"mtime":1612830602800,"results":"47","hashOfConfig":"28"},{"size":976,"mtime":1612830602801,"results":"48","hashOfConfig":"28"},{"size":4213,"mtime":1612830602799,"results":"49","hashOfConfig":"28"},{"size":1048,"mtime":1612421146600,"results":"50","hashOfConfig":"28"},{"size":551,"mtime":1611674992282,"results":"51","hashOfConfig":"28"},{"size":163,"mtime":1612834106127,"results":"52","hashOfConfig":"28"},{"size":1095,"mtime":1612834234709,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"df35y4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/index.tsx",[],["114","115"],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/pages/App.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/index.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/Combine.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/top/Header.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Title.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Url.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Login.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/ModalState.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/Discription.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/modules/PrivateClip.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/PublicClip.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/KanbanBoard.tsx",["116","117"],"import axios from 'axios';\nimport React, { useState } from 'react';\nimport styled from 'styled-components'\n\n\nconst KanbanBoard = () => {\n    return (\n        <KanbanBoardGrid>\n            KanbanBoard\n        </KanbanBoardGrid>\n    )\n};\n\n\nconst KanbanBoardGrid = styled.section`\n    width: 70%;\n    border: 1px solid;\n    border-color: pink;\n    \n`\n\nexport default KanbanBoard;\n","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/Inbox.tsx",["118","119"],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/CreateProject.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/Setting.tsx",["120"],"import React from 'react';\nimport {\n    Button,\n    DrawerBody,\n    DrawerCloseButton,\n    DrawerContent,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerProps,\n    Icon,\n    Input,\n    useDisclosure\n} from \"@chakra-ui/react\"\nimport { MdSettings } from \"react-icons/md\"\nimport {\n    Drawer\n} from \"@chakra-ui/react\"\n\n\nconst Setting = () => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const btnRef = React.useRef<HTMLButtonElement>(null)\n\n    return (\n        <>\n            <Button ref={btnRef} colorScheme=\"teal\" onClick={onOpen}>\n                <Icon as={MdSettings} />\n            </Button>\n            <Drawer\n                isOpen={isOpen}\n                placement=\"right\"\n                onClose={onClose}\n                finalFocusRef={btnRef}\n            >\n                <DrawerOverlay>\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader>Create your account</DrawerHeader>\n                        <DrawerBody>\n                            <Input placeholder=\"Type here...\" />\n                        </DrawerBody>\n                        <DrawerFooter>\n                            <Button variant=\"outline\" mr={3} onClick={onClose}>\n                                Cancel\n                        </Button>\n                            <Button color=\"blue\">Save</Button>\n                        </DrawerFooter>\n                    </DrawerContent>\n                </DrawerOverlay>\n            </Drawer>\n        </>\n    )\n};\n\nexport default Setting;","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/LoginGoogle.tsx",["121","122"],"import React from 'react';\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline } from 'react-google-login';\nimport axios from 'axios';\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\nconst LoginGoogle = () => {\n    const responseGoogle = (res: GoogleLoginResponse | GoogleLoginResponseOffline): void => {\n        if ('googleId' in res) {\n            const profile = res.getBasicProfile()\n            console.log(res.profileObj)\n        }\n    }\n    const responseFailGoogle = (err: any): void => {\n        console.log(err)\n    }\n    return (\n        <div>\n            <GoogleLogin\n                clientId={process.env.REACT_APP_GOOGLE_CLIENTID!}\n                buttonText=\"Google login\"\n                onSuccess={responseGoogle}\n                onFailure={responseFailGoogle}\n                cookiePolicy={'single_host_origin'}\n            />\n        </div>\n    );\n};\n\nexport default LoginGoogle;","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/ToggleProject.tsx",["123"],"import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport {\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    Button\n} from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons'\n\n\n\nconst ToggleProject = () => {\n    const [select, setSelect] = useState(\"Your Project\")\n    const toggle = React.useRef<HTMLButtonElement>(null)\n\n    const handleProject = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const { value } = e.target as HTMLButtonElement;\n        setSelect(value)\n    }\n    // const fetchProject = () => {\n    //     axios.get(`test`)\n    //         .then((res) => {\n    //             return res.data\n    //         })\n    // }\n    console.log(select)\n    return (\n        <>\n            <Menu>\n                {/* <MenuButton onClick={fetchProject} ref={toggle} as={Button} mr={3} rightIcon={<ChevronDownIcon />}> */}\n                <MenuButton ref={toggle} as={Button} mr={3} rightIcon={<ChevronDownIcon />}>\n                    {select}\n                </MenuButton>\n                <MenuList onClick={handleProject} >\n                    <MenuItem value=\"Download\">Download</MenuItem>\n                    <MenuItem value=\"Create a Copy\">Create a Copy</MenuItem>\n                    <MenuItem value=\"Mark as Draft\">Mark as Draft</MenuItem>\n                    <MenuItem value=\"Delete\">Delete</MenuItem>\n                    <MenuItem value=\"Attend a Workshop\">Attend a Workshop</MenuItem>\n                </MenuList>\n            </Menu>\n        </>\n    );\n};\n\nexport default ToggleProject;","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/templates/contents/PrivateClip.tsx",["124","125"],"import React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Clip from \"../../../components/atoms/Clip\";\nimport ClipAddButton from \"../../../components/atoms/ClipAddButton\";\nimport usePrivateClip from \"../../../hooks/usePrivateClip\";\nimport { Input } from \"../../../modules/PrivateClip\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\n\nconst PrivateClip = () => {\n  const { privateClipArr, changePrivateClip } = usePrivateClip();\n  const findCard = (id: string) => {\n    const clip = privateClipArr.filter((c) => `${c.id}` === id)[0];\n    return {\n      clip,\n      index: privateClipArr.indexOf(clip),\n    };\n  };\n  const moveClip = (id: string, atIndex: number) => {\n    const { clip, index } = findCard(id);\n    changePrivateClip(\n      update(privateClipArr, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, clip],\n        ],\n      }),\n    );\n  };\n  const ItemTypes = { CLIP: \"clip\" };\n  const [, drop] = useDrop({ accept: ItemTypes.CLIP });\n\n  return (\n    <PrivateClipGrid ref={drop}>\n      <ClipAddButton />\n      {privateClipArr.map((clip: Input, idx: number) => {\n        return (\n          <Clip\n            key={idx}\n            title={clip.title}\n            id={`${clip.id}`}\n            url={clip.url}\n            discription={clip.discription}\n            moveClip={moveClip}\n            findClip={findCard}\n          />\n        );\n      })}\n    </PrivateClipGrid>\n  );\n};\n\nconst PrivateClipGrid = styled.section`\n  border: 1px solid;\n  border-color: red;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nexport default PrivateClip;\n","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/ClipAddButton.tsx",["126","127","128","129","130","131"],"import React, { useState } from \"react\";\nimport useModal from \"../../hooks/useModal\";\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast,\n  Switch,\n} from \"@chakra-ui/react\";\nimport styled from \"styled-components\";\nimport useInput from \"../../hooks/useInput\";\nimport usePrivateClip from \"../../hooks/usePrivateClip\";\n\ninterface Input {\n  id: number;\n  title: string;\n  url: string;\n  discription: string;\n}\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\nconst ClipAddButton = () => {\n  const { isOpen, onOpen, onClose } = useModal();\n  const { privateClipArr, addPrivateClip } = usePrivateClip();\n  const {\n    titleState,\n    urlState,\n    discriptionState,\n    makeTitle,\n    makeUrl,\n    makeDiscription,\n  } = useInput();\n  const [switchClip, setSwitchClip] = useState(false);\n\n  const onClick = () => {\n    const obj = {\n      id: 1,\n      title: titleState,\n      url: urlState,\n      discription: discriptionState,\n    };\n    addPrivateClip(obj);\n    onClose();\n  };\n  const openModal = () => {\n    onOpen();\n    makeTitle(\"\");\n    makeUrl(\"\");\n    makeDiscription(\"\");\n  };\n\n  const onChange = (e: any) => {\n    const { name, value } = e.target;\n    if (name === \"title\") {\n      makeTitle(value);\n    } else if (name === \"url\") {\n      makeUrl(value);\n    } else if (name === \"discription\") {\n      makeDiscription(value);\n    }\n  };\n  const initialRef = React.useRef<HTMLInputElement>(null);\n  const finalRef = React.useRef<HTMLButtonElement>(null);\n\n  return (\n    <PrivateClipWrapper>\n      <button onClick={openModal}>+</button>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Add modal</ModalHeader>\n          <ModalBody pb={1}>\n            <Switch\n              size={\"md\"}\n              pb={3}\n              onChange={() => {\n                setSwitchClip(!switchClip);\n              }}\n            >\n              스위치\n            </Switch>\n            {switchClip ? (\n              <FormControl>\n                <FormLabel>Memo </FormLabel>\n                <Input\n                  placeholder=\"Memo\"\n                  name=\"discription\"\n                  onChange={onChange}\n                ></Input>\n              </FormControl>\n            ) : (\n              <div>\n                <FormControl pb={5}>\n                  <FormLabel>Title</FormLabel>\n                  <Input\n                    name=\"title\"\n                    placeholder=\"Title을 입력하세요\"\n                    onChange={onChange}\n                  ></Input>\n                </FormControl>\n                <FormControl pb={5}>\n                  <FormLabel>Url</FormLabel>\n                  <Input\n                    name=\"url\"\n                    placeholder=\"Url을 입력하세요\"\n                    onChange={onChange}\n                  ></Input>\n                </FormControl>\n                <FormControl pb={5}>\n                  <FormLabel>Discription</FormLabel>\n                  <Input\n                    placeholder=\"Discription을 입력하세요\"\n                    name=\"discription\"\n                    onChange={onChange}\n                  ></Input>\n                </FormControl>\n              </div>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button mr={3} colorScheme=\"facebook\" onClick={onClick}>\n              생성\n            </Button>\n            <Button onClick={onClose}>취소</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </PrivateClipWrapper>\n  );\n};\nconst PrivateClipWrapper = styled.div`\n  border: 1px solid;\n  border-color: green;\n`;\nexport default ClipAddButton;\n","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/usePrivateClip.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/components/atoms/Clip.tsx",["132","133"],"import React, { useState } from \"react\";\nimport useInput from \"../../hooks/useInput\";\nimport useModal from \"../../hooks/useModal\";\nimport usePrivateClip from \"../../hooks/usePrivateClip\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Modal from \"react-modal\";\nimport styled from \"styled-components\";\n\nModal.setAppElement(\"#root\");\n\ntype Clipinput = {\n  id: string;\n  title: string;\n  url: string;\n  discription: string;\n  moveClip: (id: string, to: number) => void;\n  findClip: (id: string) => { index: number };\n};\ntype Item = {\n  type: string;\n  id: string;\n  originalIndex: string;\n};\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst Clip = ({\n  id,\n  title,\n  url,\n  discription,\n  moveClip,\n  findClip,\n}: Clipinput) => {\n  const originalIndex = findClip(id).index;\n  const ItemTypes = { CLIP: \"clip\" };\n  const { deletePrivateClip, editPrivateClip } = usePrivateClip();\n  const [editModal, setEditModal] = useState(false);\n  const [switchClip, setSwitchClip] = useState(false);\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CLIP, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveClip(droppedId, originalIndex);\n      }\n    },\n  });\n  const [, drop] = useDrop({\n    accept: ItemTypes.CLIP,\n    canDrop: () => false,\n    hover({ id: draggedId }: Item) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findClip(id);\n        moveClip(draggedId, overIndex);\n      }\n    },\n  });\n  const opacity = isDragging ? 0 : 1;\n\n  const {\n    titleState,\n    urlState,\n    discriptionState,\n    makeDiscription,\n    makeTitle,\n    makeUrl,\n  } = useInput();\n  const editClip = () => {\n    const obj = {\n      id: Number(id),\n      title: titleState,\n      url: urlState,\n      discription: discriptionState,\n    };\n    editPrivateClip(obj);\n    setEditModal(false);\n  };\n  const openModal = () => {\n    setEditModal(true);\n    makeTitle(\"\");\n    makeUrl(\"\");\n    makeDiscription(\"\");\n  };\n  const onChange = (e: any) => {\n    const { name, value } = e.target;\n    if (name === \"title\") {\n      makeTitle(value);\n    } else if (name === \"url\") {\n      makeUrl(value);\n    } else if (name === \"discription\") {\n      makeDiscription(value);\n    }\n  };\n  return (\n    <ClipWrapper ref={(node) => drag(drop(node))}>\n      <div>{title}</div>\n\n      <button onClick={openModal}>edit</button>\n      <button onClick={() => deletePrivateClip(Number(id))}>delete</button>\n      <Modal\n        isOpen={editModal}\n        onRequestClose={() => setEditModal(false)}\n        style={customStyles}\n      >\n        <div>Edit modal</div>\n        <button\n          onClick={() => {\n            setSwitchClip(!switchClip);\n          }}\n        >\n          스위치\n        </button>\n        {switchClip ? (\n          <div>\n            <div>\n              <input\n                placeholder=\"Memo\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <div>\n              <input\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={onChange}\n              ></input>\n            </div>\n            <div>\n              <input name=\"url\" placeholder=\"Url\" onChange={onChange}></input>\n            </div>\n            <div>\n              <input\n                placeholder=\"Discription\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        )}\n\n        <button\n          onClick={() => {\n            setEditModal(false);\n          }}\n        >\n          취소\n        </button>\n        <button onClick={editClip}>생성</button>\n      </Modal>\n    </ClipWrapper>\n  );\n};\n\nconst ClipWrapper = styled.div`\n  border: 1px solid;\n  border-color: aqua;\n  width: 100px;\n`;\n\nexport default Clip;\n","/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/useInput.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/hooks/useModal.tsx",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/style/GlobalStyle.ts",[],"/Users/kimhyunkyu/Desktop/sideProject/Clip/client/src/style/StickyNote.ts",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"142","line":2,"column":17,"nodeType":"140","messageId":"141","endLine":2,"endColumn":25},{"ruleId":"138","severity":1,"message":"142","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"139","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":13},{"ruleId":"138","severity":1,"message":"143","line":10,"column":5,"nodeType":"140","messageId":"141","endLine":10,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":3,"column":8,"nodeType":"140","messageId":"141","endLine":3,"endColumn":13},{"ruleId":"138","severity":1,"message":"144","line":10,"column":19,"nodeType":"140","messageId":"141","endLine":10,"endColumn":26},{"ruleId":"138","severity":1,"message":"139","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":13},{"ruleId":"138","severity":1,"message":"145","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":28},{"ruleId":"138","severity":1,"message":"142","line":1,"column":30,"nodeType":"140","messageId":"141","endLine":1,"endColumn":38},{"ruleId":"138","severity":1,"message":"146","line":10,"column":3,"nodeType":"140","messageId":"141","endLine":10,"endColumn":19},{"ruleId":"138","severity":1,"message":"147","line":15,"column":3,"nodeType":"140","messageId":"141","endLine":15,"endColumn":16},{"ruleId":"138","severity":1,"message":"148","line":16,"column":3,"nodeType":"140","messageId":"141","endLine":16,"endColumn":11},{"ruleId":"149","severity":1,"message":"150","line":23,"column":11,"nodeType":"140","messageId":"151","endLine":23,"endColumn":16},{"ruleId":"138","severity":1,"message":"152","line":30,"column":7,"nodeType":"140","messageId":"141","endLine":30,"endColumn":19},{"ruleId":"138","severity":1,"message":"153","line":42,"column":11,"nodeType":"140","messageId":"141","endLine":42,"endColumn":25},{"ruleId":"138","severity":1,"message":"154","line":3,"column":8,"nodeType":"140","messageId":"141","endLine":3,"endColumn":16},{"ruleId":"138","severity":1,"message":"155","line":72,"column":9,"nodeType":"140","messageId":"141","endLine":72,"endColumn":16},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'DrawerProps' is defined but never used.","'profile' is assigned a value but never used.","'useCallback' is defined but never used.","'ModalCloseButton' is defined but never used.","'useDisclosure' is defined but never used.","'useToast' is defined but never used.","@typescript-eslint/no-redeclare","'Input' is already defined.","redeclared","'customStyles' is assigned a value but never used.","'privateClipArr' is assigned a value but never used.","'useModal' is defined but never used.","'opacity' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]

