[{"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/index.tsx":"1","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/pages/App.tsx":"2","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/index.ts":"3","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/top/Header.tsx":"4","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/Combine.tsx":"5","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/ModalState.ts":"6","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Login.ts":"7","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/PrivateClip.tsx":"8","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/PublicClip.tsx":"9","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/Inbox.tsx":"10","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/KanbanBoard.tsx":"11","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/ClipAddButton.tsx":"12","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useModal.tsx":"13","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useInput.tsx":"14","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Title.ts":"15","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Url.ts":"16","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Discription.ts":"17","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/Clip.tsx":"18","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Input.ts":"19","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/PrivateClip.ts":"20","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/usePrivateClip.tsx":"21","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/LoginGoogle.tsx":"22","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/CreateProject.tsx":"23","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/Setting.tsx":"24","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/ToggleProject.tsx":"25","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/style/StickyNote.ts":"26","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/style/GlobalStyle.ts":"27","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/usePublicClip.tsx":"28","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/PublicClip.ts":"29","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/P_Clip.tsx":"30","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/PublicClipAddButton.tsx":"31","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/AddModal.tsx":"32","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/AddModal.ts":"33","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useAddModal.tsx":"34"},{"size":627,"mtime":1612787358224,"results":"35","hashOfConfig":"36"},{"size":599,"mtime":1614084574875,"results":"37","hashOfConfig":"36"},{"size":657,"mtime":1614085326325,"results":"38","hashOfConfig":"36"},{"size":369,"mtime":1613042897056,"results":"39","hashOfConfig":"36"},{"size":647,"mtime":1612787358220,"results":"40","hashOfConfig":"36"},{"size":679,"mtime":1614085484544,"results":"41","hashOfConfig":"36"},{"size":624,"mtime":1612027214618,"results":"42","hashOfConfig":"36"},{"size":1685,"mtime":1613042465578,"results":"43","hashOfConfig":"36"},{"size":1694,"mtime":1613997625534,"results":"44","hashOfConfig":"36"},{"size":605,"mtime":1613042897055,"results":"45","hashOfConfig":"36"},{"size":377,"mtime":1612787358222,"results":"46","hashOfConfig":"36"},{"size":569,"mtime":1614085942965,"results":"47","hashOfConfig":"36"},{"size":551,"mtime":1612027214618,"results":"48","hashOfConfig":"36"},{"size":1048,"mtime":1612398185627,"results":"49","hashOfConfig":"36"},{"size":476,"mtime":1612398185629,"results":"50","hashOfConfig":"36"},{"size":450,"mtime":1612398185629,"results":"51","hashOfConfig":"36"},{"size":554,"mtime":1612398185628,"results":"52","hashOfConfig":"36"},{"size":4222,"mtime":1613044180946,"results":"53","hashOfConfig":"36"},{"size":1034,"mtime":1612353275090,"results":"54","hashOfConfig":"36"},{"size":2330,"mtime":1613871531166,"results":"55","hashOfConfig":"36"},{"size":976,"mtime":1612787358224,"results":"56","hashOfConfig":"36"},{"size":920,"mtime":1612027214615,"results":"57","hashOfConfig":"36"},{"size":2828,"mtime":1613042897053,"results":"58","hashOfConfig":"36"},{"size":1348,"mtime":1613042897054,"results":"59","hashOfConfig":"36"},{"size":1446,"mtime":1613042897054,"results":"60","hashOfConfig":"36"},{"size":1095,"mtime":1613042897057,"results":"61","hashOfConfig":"36"},{"size":163,"mtime":1613042897056,"results":"62","hashOfConfig":"36"},{"size":963,"mtime":1613996782587,"results":"63","hashOfConfig":"36"},{"size":2328,"mtime":1613871678745,"results":"64","hashOfConfig":"36"},{"size":4219,"mtime":1613873132843,"results":"65","hashOfConfig":"36"},{"size":578,"mtime":1614085942005,"results":"66","hashOfConfig":"36"},{"size":3798,"mtime":1614086163091,"results":"67","hashOfConfig":"36"},{"size":733,"mtime":1614085290650,"results":"68","hashOfConfig":"36"},{"size":594,"mtime":1614085635851,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"yka4di",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/index.tsx",[],["149","150"],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/pages/App.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/index.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/top/Header.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/Combine.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/ModalState.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Login.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/PrivateClip.tsx",["151","152"],"import React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Clip from \"../../../components/atoms/Clip\";\nimport ClipAddButton from \"../../../components/atoms/ClipAddButton\";\nimport usePrivateClip from \"../../../hooks/usePrivateClip\";\nimport { Input } from \"../../../modules/PrivateClip\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\n\nconst PrivateClip = () => {\n  const { privateClipArr, changePrivateClip } = usePrivateClip();\n  const findCard = (id: string) => {\n    const clip = privateClipArr.filter((c) => `${c.id}` === id)[0];\n    return {\n      clip,\n      index: privateClipArr.indexOf(clip),\n    };\n  };\n  const moveClip = (id: string, atIndex: number) => {\n    const { clip, index } = findCard(id);\n    changePrivateClip(\n      update(privateClipArr, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, clip],\n        ],\n      }),\n    );\n  };\n  const ItemTypes = { CLIP: \"clip\" };\n  const [, drop] = useDrop({ accept: ItemTypes.CLIP });\n\n  return (\n    <PrivateClipGrid ref={drop}>\n      <ClipAddButton />\n      {privateClipArr.map((clip: Input, idx: number) => {\n        return (\n          <Clip\n            key={idx}\n            title={clip.title}\n            id={`${clip.id}`}\n            url={clip.url}\n            discription={clip.discription}\n            moveClip={moveClip}\n            findClip={findCard}\n          />\n        );\n      })}\n    </PrivateClipGrid>\n  );\n};\n\nconst PrivateClipGrid = styled.section`\n  border: 1px solid;\n  border-color: red;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nexport default PrivateClip;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/PublicClip.tsx",["153","154","155"],"import React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport P_Clip from \"../../../components/atoms/P_Clip\";\nimport PublicClipAddButton from \"../../../components/atoms/PublicClipAddButton\";\nimport usePublicClip from \"../../../hooks/usePublicClip\";\nimport { Input } from \"../../../modules/PublicClip\";\nimport { useDrop } from \"react-dnd\";\nimport update from \"immutability-helper\";\n\nconst PublicClip = () => {\n  const { publicClipArr, changePublicClip } = usePublicClip();\n  const findCard = (id: string) => {\n    const clip = publicClipArr.filter((c) => `${c.id}` === id)[0];\n    return {\n      clip,\n      index: publicClipArr.indexOf(clip),\n    };\n  };\n  const moveClip = (id: string, atIndex: number) => {\n    const { clip, index } = findCard(id);\n    changePublicClip(\n      update(publicClipArr, {\n        $splice: [\n          [index, 1],\n          [atIndex, 0, clip],\n        ],\n      }),\n    );\n  };\n  const ItemTypes = { CLIP: \"clip\" };\n  const [, drop] = useDrop({ accept: ItemTypes.CLIP });\n\n  return (\n    <PublicClipGrid ref={drop}>\n      <PublicClipAddButton />\n      {publicClipArr.map((clip: Input, idx: number) => {\n        return (\n          <P_Clip\n            key={idx}\n            title={clip.title}\n            id={`${clip.id}`}\n            url={clip.url}\n            discription={clip.discription}\n            moveClip={moveClip}\n            findClip={findCard}\n          />\n        );\n      })}\n    </PublicClipGrid>\n  );\n};\n\nconst PublicClipGrid = styled.section`\n  border: 1px solid;\n  border-color: blue;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nexport default PublicClip;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/Inbox.tsx",["156","157"],"import React, { useState } from 'react';\nimport styled from \"styled-components\"\nimport { Note, Tape, NoteList } from \"../../../style/StickyNote\";\nimport axios from 'axios';\n\n\nconst Inbox = () => {\n    return (\n        <InboxGrid>\n            <Note>\n                <Tape></Tape>\n                <NoteList>\n                    <li>Test StickyNote </li>\n                    <li>포스트잇 테스트</li>\n                </NoteList>\n            </Note>\n        </InboxGrid>\n    )\n};\n\nconst InboxGrid = styled.section`\n    width: 30%;\n    border: 1px solid;\n    border-color: green;\n`\n\nexport default Inbox;","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/templates/contents/KanbanBoard.tsx",["158","159"],"import axios from 'axios';\nimport React, { useState } from 'react';\nimport styled from 'styled-components'\n\n\nconst KanbanBoard = () => {\n    return (\n        <KanbanBoardGrid>\n            KanbanBoard\n        </KanbanBoardGrid>\n    )\n};\n\n\nconst KanbanBoardGrid = styled.section`\n    width: 70%;\n    border: 1px solid;\n    border-color: pink;\n    \n`\n\nexport default KanbanBoard;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/ClipAddButton.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useModal.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useInput.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Title.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Url.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Discription.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/Clip.tsx",["160","161"],"import React, { useState } from \"react\";\nimport useInput from \"../../hooks/useInput\";\nimport useModal from \"../../hooks/useModal\";\nimport usePrivateClip from \"../../hooks/usePrivateClip\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Modal from \"react-modal\";\nimport styled from \"styled-components\";\n\nModal.setAppElement(\"#root\");\n\ntype Clipinput = {\n  id: string;\n  title: string;\n  url: string;\n  discription: string;\n  moveClip: (id: string, to: number) => void;\n  findClip: (id: string) => { index: number };\n};\ntype Item = {\n  type: string;\n  id: string;\n  originalIndex: string;\n};\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst Clip = ({\n  id,\n  title,\n  url,\n  discription,\n  moveClip,\n  findClip,\n}: Clipinput) => {\n  const originalIndex = findClip(id).index;\n  const ItemTypes = { CLIP: \"clip\" };\n  const { deletePrivateClip, editPrivateClip } = usePrivateClip();\n  const [editModal, setEditModal] = useState(false);\n  const [switchClip, setSwitchClip] = useState(false);\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CLIP, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveClip(droppedId, originalIndex);\n      }\n    },\n  });\n  const [, drop] = useDrop({\n    accept: ItemTypes.CLIP,\n    canDrop: () => false,\n    hover({ id: draggedId }: Item) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findClip(id);\n        moveClip(draggedId, overIndex);\n      }\n    },\n  });\n  const opacity = isDragging ? 0 : 1;\n\n  const {\n    titleState,\n    urlState,\n    discriptionState,\n    makeDiscription,\n    makeTitle,\n    makeUrl,\n  } = useInput();\n  const editClip = () => {\n    const obj = {\n      id: Number(id),\n      title: titleState,\n      url: urlState,\n      discription: discriptionState,\n    };\n    editPrivateClip(obj);\n    setEditModal(false);\n  };\n  const openModal = () => {\n    setEditModal(true);\n    makeTitle(\"\");\n    makeUrl(\"\");\n    makeDiscription(\"\");\n  };\n  const onChange = (e: any) => {\n    const { name, value } = e.target;\n    if (name === \"title\") {\n      makeTitle(value);\n    } else if (name === \"url\") {\n      makeUrl(value);\n    } else if (name === \"discription\") {\n      makeDiscription(value);\n    }\n  };\n  return (\n    <ClipWrapper ref={(node) => drag(drop(node))} href={url}>\n      <div>{title}</div>\n\n      <button onClick={() => openModal()}>edit</button>\n      <button onClick={() => deletePrivateClip(Number(id))}>delete</button>\n      <Modal\n        isOpen={editModal}\n        onRequestClose={() => setEditModal(false)}\n        style={customStyles}\n      >\n        <div>Edit modal</div>\n        <button\n          onClick={() => {\n            setSwitchClip(!switchClip);\n          }}\n        >\n          스위치\n        </button>\n        {switchClip ? (\n          <div>\n            <div>\n              <input\n                placeholder=\"Memo\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <div>\n              <input\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={onChange}\n              ></input>\n            </div>\n            <div>\n              <input name=\"url\" placeholder=\"Url\" onChange={onChange}></input>\n            </div>\n            <div>\n              <input\n                placeholder=\"Discription\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        )}\n\n        <button\n          onClick={() => {\n            setEditModal(false);\n          }}\n        >\n          취소\n        </button>\n        <button onClick={() => editClip()}>생성</button>\n      </Modal>\n    </ClipWrapper>\n  );\n};\n\nconst ClipWrapper = styled.a`\n  border: 1px solid;\n  border-color: aqua;\n`;\n\nexport default Clip;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/Input.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/PrivateClip.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/usePrivateClip.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/LoginGoogle.tsx",["162","163"],"import React from 'react';\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline } from 'react-google-login';\nimport axios from 'axios';\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\nconst LoginGoogle = () => {\n    const responseGoogle = (res: GoogleLoginResponse | GoogleLoginResponseOffline): void => {\n        if ('googleId' in res) {\n            const profile = res.getBasicProfile()\n            console.log(res.profileObj)\n        }\n    }\n    const responseFailGoogle = (err: any): void => {\n        console.log(err)\n    }\n    return (\n        <div>\n            <GoogleLogin\n                clientId={process.env.REACT_APP_GOOGLE_CLIENTID!}\n                buttonText=\"Google login\"\n                onSuccess={responseGoogle}\n                onFailure={responseFailGoogle}\n                cookiePolicy={'single_host_origin'}\n            />\n        </div>\n    );\n};\n\nexport default LoginGoogle;",["164","165"],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/CreateProject.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/Setting.tsx",["166","167"],"\nimport React from 'react';\nimport LoginGoogle from \"../atoms/LoginGoogle\"\n\nimport {\n  Button,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerProps,\n  Icon,\n  Input,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { MdSettings } from \"react-icons/md\";\nimport { Drawer } from \"@chakra-ui/react\";\n\nconst Setting = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"teal\" onClick={() => onOpen()}>\n        <Icon as={MdSettings} />\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader>Create your account</DrawerHeader>\n            <DrawerBody>\n              <Input placeholder=\"Type here...\" />\n            </DrawerBody>\n            <DrawerFooter>\n              <Button variant=\"outline\" mr={3} onClick={() => onClose()}>\n                Cancel\n              </Button>\n              <Button color=\"blue\">Save</Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n\n};\n\nexport default Setting;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/ToggleProject.tsx",["168"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nimport { Menu, MenuButton, MenuList, MenuItem, Button } from \"@chakra-ui/react\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\n\nconst ToggleProject = () => {\n  const [select, setSelect] = useState(\"Your Project\");\n  const toggle = React.useRef<HTMLButtonElement>(null);\n\n  const handleProject = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const { value } = e.target as HTMLButtonElement;\n    setSelect(value);\n  };\n  // const fetchProject = () => {\n  //     axios.get(`test`)\n  //         .then((res) => {\n  //             return res.data\n  //         })\n  // }\n  console.log(select);\n  return (\n    <>\n      <Menu>\n        {/* <MenuButton onClick={fetchProject} ref={toggle} as={Button} mr={3} rightIcon={<ChevronDownIcon />}> */}\n        <MenuButton\n          ref={toggle}\n          as={Button}\n          mr={3}\n          rightIcon={<ChevronDownIcon />}\n        >\n          {select}\n        </MenuButton>\n        <MenuList onClick={() => handleProject}>\n          <MenuItem value=\"Download\">Download</MenuItem>\n          <MenuItem value=\"Create a Copy\">Create a Copy</MenuItem>\n          <MenuItem value=\"Mark as Draft\">Mark as Draft</MenuItem>\n          <MenuItem value=\"Delete\">Delete</MenuItem>\n          <MenuItem value=\"Attend a Workshop\">Attend a Workshop</MenuItem>\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nexport default ToggleProject;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/style/StickyNote.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/style/GlobalStyle.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/usePublicClip.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/PublicClip.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/P_Clip.tsx",["169","170"],"import React, { useState } from \"react\";\nimport useInput from \"../../hooks/useInput\";\nimport useModal from \"../../hooks/useModal\";\nimport usePublicClip from \"../../hooks/usePublicClip\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Modal from \"react-modal\";\nimport styled from \"styled-components\";\n\nModal.setAppElement(\"#root\");\n\ntype Clipinput = {\n  id: string;\n  title: string;\n  url: string;\n  discription: string;\n  moveClip: (id: string, to: number) => void;\n  findClip: (id: string) => { index: number };\n};\ntype Item = {\n  type: string;\n  id: string;\n  originalIndex: string;\n};\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst P_Clip = ({\n  id,\n  title,\n  url,\n  discription,\n  moveClip,\n  findClip,\n}: Clipinput) => {\n  const originalIndex = findClip(id).index;\n  const ItemTypes = { CLIP: \"clip\" };\n  const { deletePublicClip, editPublicClip } = usePublicClip();\n  const [editModal, setEditModal] = useState(false);\n  const [switchClip, setSwitchClip] = useState(false);\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CLIP, id, originalIndex },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    end: (dropResult, monitor) => {\n      const { id: droppedId, originalIndex } = monitor.getItem();\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        moveClip(droppedId, originalIndex);\n      }\n    },\n  });\n  const [, drop] = useDrop({\n    accept: ItemTypes.CLIP,\n    canDrop: () => false,\n    hover({ id: draggedId }: Item) {\n      if (draggedId !== id) {\n        const { index: overIndex } = findClip(id);\n        moveClip(draggedId, overIndex);\n      }\n    },\n  });\n  const opacity = isDragging ? 0 : 1;\n\n  const {\n    titleState,\n    urlState,\n    discriptionState,\n    makeDiscription,\n    makeTitle,\n    makeUrl,\n  } = useInput();\n  const editClip = () => {\n    const obj = {\n      id: Number(id),\n      title: titleState,\n      url: urlState,\n      discription: discriptionState,\n    };\n    editPublicClip(obj);\n    setEditModal(false);\n  };\n  const openModal = () => {\n    setEditModal(true);\n    makeTitle(\"\");\n    makeUrl(\"\");\n    makeDiscription(\"\");\n  };\n  const onChange = (e: any) => {\n    const { name, value } = e.target;\n    if (name === \"title\") {\n      makeTitle(value);\n    } else if (name === \"url\") {\n      makeUrl(value);\n    } else if (name === \"discription\") {\n      makeDiscription(value);\n    }\n  };\n  return (\n    <ClipWrapper ref={(node) => drag(drop(node))} href={url}>\n      <div>{title}</div>\n\n      <button onClick={() => openModal()}>edit</button>\n      <button onClick={() => deletePublicClip(Number(id))}>delete</button>\n      <Modal\n        isOpen={editModal}\n        onRequestClose={() => setEditModal(false)}\n        style={customStyles}\n      >\n        <div>Edit modal</div>\n        <button\n          onClick={() => {\n            setSwitchClip(!switchClip);\n          }}\n        >\n          스위치\n        </button>\n        {switchClip ? (\n          <div>\n            <div>\n              <input\n                placeholder=\"Memo\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <div>\n              <input\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={onChange}\n              ></input>\n            </div>\n            <div>\n              <input name=\"url\" placeholder=\"Url\" onChange={onChange}></input>\n            </div>\n            <div>\n              <input\n                placeholder=\"Discription\"\n                name=\"discription\"\n                onChange={onChange}\n              ></input>\n            </div>\n          </div>\n        )}\n\n        <button\n          onClick={() => {\n            setEditModal(false);\n          }}\n        >\n          취소\n        </button>\n        <button onClick={() => editClip()}>생성</button>\n      </Modal>\n    </ClipWrapper>\n  );\n};\n\nconst ClipWrapper = styled.a`\n  border: 1px solid;\n  border-color: aqua;\n`;\n\nexport default P_Clip;\n","/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/PublicClipAddButton.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/components/atoms/AddModal.tsx",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/modules/AddModal.ts",[],"/Users/donghun/Documents/DH/Developer/sideProjects/Clip/client/src/hooks/useAddModal.tsx",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":28},{"ruleId":"175","severity":1,"message":"179","line":1,"column":30,"nodeType":"177","messageId":"178","endLine":1,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":28},{"ruleId":"175","severity":1,"message":"179","line":1,"column":30,"nodeType":"177","messageId":"178","endLine":1,"endColumn":38},{"ruleId":"180","severity":1,"message":"181","line":38,"column":11,"nodeType":"182","endLine":46,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":1,"column":17,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"183","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"183","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":2,"column":17,"nodeType":"177","messageId":"178","endLine":2,"endColumn":25},{"ruleId":"175","severity":1,"message":"184","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":16},{"ruleId":"175","severity":1,"message":"185","line":72,"column":9,"nodeType":"177","messageId":"178","endLine":72,"endColumn":16},{"ruleId":"175","severity":1,"message":"183","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":13},{"ruleId":"175","severity":1,"message":"186","line":10,"column":19,"nodeType":"177","messageId":"178","endLine":10,"endColumn":26},{"ruleId":"171","replacedBy":"187"},{"ruleId":"173","replacedBy":"188"},{"ruleId":"175","severity":1,"message":"189","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":19},{"ruleId":"175","severity":1,"message":"190","line":13,"column":3,"nodeType":"177","messageId":"178","endLine":13,"endColumn":14},{"ruleId":"175","severity":1,"message":"183","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":13},{"ruleId":"175","severity":1,"message":"184","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":16},{"ruleId":"175","severity":1,"message":"185","line":72,"column":9,"nodeType":"177","messageId":"178","endLine":72,"endColumn":16},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react/jsx-pascal-case","Imported JSX component P_Clip must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'axios' is defined but never used.","'useModal' is defined but never used.","'opacity' is assigned a value but never used.","'profile' is assigned a value but never used.",["191"],["192"],"'LoginGoogle' is defined but never used.","'DrawerProps' is defined but never used.","no-global-assign","no-unsafe-negation"]